{
    "schemes": [],
    "swagger": "2.0",
    "info": {
        "description": "",
        "title": "Demo User Api",
        "contact": {},
        "version": ""
    },
    "host": "",
    "basePath": "",
    "paths": {
        "/api/v1/users": {
            "get": {
                "description": "Search users based on various filters such as first name, last name, email, age, status, gender, and DNI.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Search Users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "X-Client-Id",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User first name to search for (optional)",
                        "name": "first_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "User last name to search for (optional)",
                        "name": "last_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "User email to search for (optional)",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "User age to search for (optional)",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "User status to search for (optional)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "User gender to search for (optional)",
                        "name": "gender",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "User DNI to search for (optional)",
                        "name": "dni",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination (optional, min=1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (optional, min=1)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful search operation",
                        "schema": {
                            "$ref": "#/definitions/dto.SearchUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Field validation errors",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Missing X-Client-Id header",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests - Rate limit exceeded (Token Bucket)",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Search request missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "X-Client-Id",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Create user request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Field validation errors",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Missing X-Client-Id header",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests - Token bucket limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}": {
            "get": {
                "description": "Retrieve a user by their unique ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Find User by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "X-Client-Id",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of user",
                        "schema": {
                            "$ref": "#/definitions/dto.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid ID or other errors",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Missing X-Client-Id header",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests - Rate limit exceeded (Token Bucket)",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing user by their unique ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update User by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update user request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful update of user",
                        "schema": {
                            "$ref": "#/definitions/dto.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid ID or request body",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Missing X-Client-Id header",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests - Rate limit exceeded (Token Bucket)",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a user by their unique ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete User by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "X-Client-Id",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful deletion of user"
                    },
                    "400": {
                        "description": "Bad Request - Invalid ID or other errors",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Missing X-Client-Id header",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests - Rate limit exceeded (Token Bucket)",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreateUserRequest": {
            "type": "object",
            "required": [
                "age",
                "dni",
                "email",
                "first_name",
                "gender",
                "last_name",
                "status"
            ],
            "properties": {
                "age": {
                    "type": "integer",
                    "maximum": 125,
                    "minimum": 12
                },
                "dni": {
                    "type": "string",
                    "maxLength": 12,
                    "minLength": 8
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "gender": {
                    "type": "string",
                    "enum": [
                        "Male",
                        "Female"
                    ]
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "enabled",
                        "disabled"
                    ]
                }
            }
        },
        "dto.SearchUsersResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.User"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.User": {
            "type": "object",
            "required": [
                "age",
                "dni",
                "email",
                "first_name",
                "gender",
                "last_name",
                "status"
            ],
            "properties": {
                "age": {
                    "type": "integer",
                    "maximum": 125,
                    "minimum": 12
                },
                "dni": {
                    "type": "string",
                    "maxLength": 12,
                    "minLength": 8
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "gender": {
                    "type": "string",
                    "enum": [
                        "Male",
                        "Female"
                    ]
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "enabled",
                        "disabled"
                    ]
                }
            }
        },
        "models.Error": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}